(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{75:function(t,e,a){"use strict";a.r(e);var s={props:["slot-key"],mounted(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},i=a(1),d=Object(i.a)(s,function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[a("h1",{attrs:{id:"_2-时光穿梭机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-时光穿梭机","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 时光穿梭机")]),t._v(" "),a("p",[t._v("修改readme.txt")]),t._v(" "),a("blockquote",[a("p",[t._v("Git is a distributed version control system."),a("br"),t._v("\nGit is free software."),a("br")])]),t._v(" "),a("p",[t._v("运行"),a("code",[t._v("git status")]),t._v("命令看结果")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git status\nOn branch master\nChanges not staged for commit:\n  (use 'git add <file>...' to update what will be committed)\n  (use 'git checkout -- <file>...'to discard changes in working directory)\n    modified: readme.txt\nno changes added to commit (use 'git add' and/or 'git commit -a')\n")])])]),a("blockquote",[a("ul",[a("li",[a("code",[t._v("git status")]),t._v("命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，"),a("code",[t._v("readme.txt")]),t._v("被修改过了，但还没有准备提交的修改"),a("br")]),t._v(" "),a("li",[t._v("虽然Git告诉我们"),a("code",[t._v("readme.txt")]),t._v("被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的"),a("code",[t._v("readme.txt")]),t._v("，所以，需要用"),a("code",[t._v("git diff")]),t._v("这个命令看看")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git diff readme.txt\ndiff --git a/readme.txt b/readme.txt\nindex 46d49bf..9247db6 100644\n--- a/readme.txt\n+++ b/readme/txt\n@@ -1,2 +1,2 @@\n-Git is a version control system.\n+Git is a distributed version control system.\n Git is free software.\n")])])]),a("blockquote",[a("ul",[a("li",[a("code",[t._v("git diff")]),t._v("顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个"),a("code",[t._v("distributed")]),t._v("单词"),a("br")]),t._v(" "),a("li",[t._v("知道了对"),a("code",[t._v("readme.txt")]),t._v("作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是"),a("code",[t._v("git add")])])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git add readme.txt\n")])])]),a("blockquote",[a("p",[t._v("同样没有任何输出。在执行第二步"),a("code",[t._v("git commit")]),t._v("之前，我们再运行"),a("code",[t._v("git status")]),t._v("看看当前仓库的状态"),a("br")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    modified:   readme.txt\n')])])]),a("blockquote",[a("p",[a("code",[t._v("git status")]),t._v("告诉我们，将要被提交的修改包括"),a("code",[t._v("readme.txt")]),t._v("，下一步，就可以放心地提交了"),a("br")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git commit -m 'add distributed'\n[master e475afc] add distributed\n  1 file changed, 1 insertion(+), 1 deletion(-)\n")])])]),a("blockquote",[a("p",[t._v("提交后，我们再用"),a("code",[t._v("git status")]),t._v("命令看看仓库的当前状态")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git status\nOn branch master\nnothing to commit, working tree clean\n")])])]),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),a("ul",[a("li",[t._v("要随时掌握工作区的状态，使用"),a("code",[t._v("git status")]),t._v("命令。")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("git status")]),t._v("告诉你有文件被修改过，用git diff可以查看修改内容")])])]),t._v(" "),a("h2",{attrs:{id:"版本回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回退","aria-hidden":"true"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),a("p",[t._v("修改readme.txt文件如下"),a("br")]),t._v(" "),a("blockquote",[a("p",[t._v("Git is a distributed version control system."),a("br"),t._v("\nGit is free software distributed under the GPL."),a("br"),t._v("\n提交")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git add readme.txt\n$ git commit -m 'append GPL'\n[master 1094adb] append GPL\n  1 file changed, 1 insertion(+), 1 deletion(-)\n")])])]),a("p",[t._v("🎉每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为"),a("code",[t._v("commit")]),t._v("。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个"),a("code",[t._v("commit")]),t._v("恢复，然后继续工作，而不是把几个月的工作成果全部丢失"),a("br"),t._v("\n🎉现在，我们回顾一下readme.txt文件一共有几个版本被提交到Git仓库里了："),a("br")]),t._v(" "),a("p",[t._v("版本1：wrote a readme file")]),t._v(" "),a("blockquote",[a("p",[t._v("Git is a version control system."),a("br"),t._v("\nGit is free software.")])]),t._v(" "),a("p",[t._v("版本2：add distributed")]),t._v(" "),a("blockquote",[a("p",[t._v("Git is a distributed version control system."),a("br"),t._v("\nGit is free software.")])]),t._v(" "),a("p",[t._v("版本3：append GPL")]),t._v(" "),a("blockquote",[a("p",[t._v("Git is a distributed version control system."),a("br"),t._v("\nGit is free software distributed under the GPL.")])]),t._v(" "),a("blockquote",[a("p",[t._v("在Git中，我们用"),a("code",[t._v("git log")]),t._v("命令查看每次修改的内容：")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git log\ncommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master)\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 21:06:15 2018 +0800\n\n    append GPL\n\ncommit e475afc93c209a690c39c13a46716e8fa000c366\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 21:03:36 2018 +0800\n\n    add distributed\n\ncommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 20:59:18 2018 +0800\n\n    wrote a readme file\n")])])]),a("blockquote",[a("ul",[a("li",[a("code",[t._v("git log")]),t._v("命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是"),a("code",[t._v("append GPL")]),t._v("，上一次是"),a("code",[t._v("add distributed")]),t._v("，最早的一次是"),a("code",[t._v("wrote a readme file")]),a("br")]),t._v(" "),a("li",[t._v("如果嫌输出信息太多，看得眼花缭乱的，可以试试加上"),a("code",[t._v("--pretty=oneline")]),t._v("参数")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git log --pretty=oneline\n1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master) append GPL\ne475afc93c209a690c39c13a46716e8fa000c366 add distributed\neaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file\n")])])]),a("blockquote",[a("ul",[a("li",[t._v("好了，现在我们启动时光穿梭机，准备把"),a("code",[t._v("readme.txt")]),t._v("回退到上一个版本，也就是"),a("code",[t._v("add distributed")]),t._v("的那个版本，怎么做呢？"),a("br")]),t._v(" "),a("li",[t._v("首先，Git必须知道当前版本是哪个版本，在Git中，用"),a("code",[t._v("HEAD")]),t._v("表示当前版本，也就是最新的提交"),a("code",[t._v("1094adb...")]),t._v("（注意我的提交ID和你的肯定不一样），上一个版本就是"),a("code",[t._v("HEAD^")]),t._v("，上上一个版本就是"),a("code",[t._v("HEAD^^")]),t._v("，当然往上100个版本写100个^比较容易数不过来，所以写成"),a("code",[t._v("HEAD~100")]),a("br")]),t._v(" "),a("li",[t._v("现在，我们要把当前版本"),a("code",[t._v("append GPL")]),t._v("回退到上一个版本"),a("code",[t._v("add distributed")]),t._v("，就可以使用"),a("code",[t._v("git reset")]),t._v("命令")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reset --hard HEAD^\nHEAD is now at e475afc add distributed\n")])])]),a("blockquote",[a("p",[a("code",[t._v("--hard")]),t._v("参数有啥意义？这个后面再讲，现在你先放心使用\n看看"),a("code",[t._v("readme.txt")]),t._v("的内容是不是版本"),a("code",[t._v("add distributed")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cat readme.txt\nGit is a distributed version control system.\nGit is free software.\n")])])]),a("blockquote",[a("p",[t._v("还可以继续回退到上一个版本"),a("code",[t._v("wrote a readme file")]),t._v("，不过且慢，然我们用"),a("code",[t._v("git log")]),t._v("再看看现在版本库的状态")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git log\ncommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -> master)\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 21:03:36 2018 +0800\n\n    add distributed\n\ncommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 20:59:18 2018 +0800\n\n    wrote a readme file\n")])])]),a("blockquote",[a("p",[t._v("最新的那个版本"),a("code",[t._v("append GPL")]),t._v("已经看不到了!"),a("br"),t._v("\n办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个"),a("code",[t._v("append GPL")]),t._v("的"),a("code",[t._v("commit id")]),t._v("是"),a("code",[t._v("1094adb...")]),t._v("，于是就可以指定回到未来的某个版本")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reset --hard 1094a\nHEAD is now at 83b0afe append GPL\n")])])]),a("blockquote",[a("p",[t._v("版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了"),a("br"),t._v("\n再小心翼翼地看看"),a("code",[t._v("readme.txt")]),t._v("的内容")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\n")])])]),a("blockquote",[a("ul",[a("li",[t._v("Git的版本回退速度非常快，因为Git在内部有个指向当前版本的"),a("code",[t._v("HEAD")]),t._v("指针，当你回退版本的时候，Git仅仅是把"),a("code",[t._v("HEAD")]),t._v("从指向"),a("code",[t._v("append GPL")]),a("br")]),t._v(" "),a("li",[t._v("改为指向"),a("code",[t._v("add distributed")])]),t._v(" "),a("li",[t._v("然后顺便把工作区的文件更新了。所以你让"),a("code",[t._v("HEAD")]),t._v("指向哪个版本号，你就把当前版本定位在哪")]),t._v(" "),a("li",[t._v("现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的"),a("code",[t._v("commit id")]),t._v("怎么办")]),t._v(" "),a("li",[t._v("在Git中，总是有后悔药可以吃的。当你用"),a("code",[t._v("$ git reset --hard HEAD^")]),t._v("回退到"),a("code",[t._v("add distributed")]),t._v("版本时，再想恢复到"),a("code",[t._v("append GPL")]),t._v("，就必须找到a"),a("code",[t._v("ppend GPL")]),t._v("的"),a("code",[t._v("commit id")]),t._v("。Git提供了一个命令"),a("code",[t._v("git reflog")]),t._v("用来记录你的每一次命令")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reflog\ne475afc HEAD@{1}: reset: moving to HEAD^\n1094adb (HEAD -> master) HEAD@{2}: commit: append GPL\ne475afc HEAD@{3}: commit: add distributed\neaadf4e HEAD@{4}: commit (initial): wrote a readme file\n")])])]),a("blockquote",[a("p",[t._v("终于舒了口气，从输出可知，"),a("code",[t._v("append GPL")]),t._v("的"),a("code",[t._v("commit id")]),t._v("是"),a("code",[t._v("1094adb")]),t._v("，现在，你又可以乘坐时光机回到未来了")])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),a("ul",[a("li",[t._v("HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令"),a("code",[t._v("git reset --hard commit_id")])]),t._v(" "),a("li",[t._v("穿梭前，用"),a("code",[t._v("git log")]),t._v("可以查看提交历史，以便确定要回退到哪个版本")]),t._v(" "),a("li",[t._v("要重返未来，用"),a("code",[t._v("git reflog")]),t._v("查看命令历史，以便确定要回到未来的哪个版本")])])]),t._v(" "),a("h2",{attrs:{id:"工作区和暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作区和暂存区","aria-hidden":"true"}},[t._v("#")]),t._v(" 工作区和暂存区")]),t._v(" "),a("blockquote",[a("p",[t._v("Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念")])]),t._v(" "),a("ul",[a("li",[t._v("工作区（Working Directory）")]),t._v(" "),a("li",[t._v("版本库（Repository）")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("工作区有一个隐藏目录"),a("code",[t._v(".git")]),t._v("，这个不算工作区，而是Git的版本库")]),t._v(" "),a("li",[t._v("Git的版本库里存了很多东西，其中最重要的就是称为"),a("code",[t._v("stage（或者叫index）")]),t._v("的暂存区，还有Git为我们自动创建的第一个分支"),a("code",[t._v("master")]),t._v("，以及指向"),a("code",[t._v("master")]),t._v("的一个指针叫"),a("code",[t._v("HEAD")])])])]),t._v(" "),a("import",{attrs:{text:"工作区（add）-> 版本库的stage（commit） -> master（有一个HEAD指针指向这）"}}),t._v(" "),a("ul",[a("li",[t._v("前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("第一步是用"),a("code",[t._v("git add")]),t._v("把文件添加进去，实际上就是把文件修改添加到暂存区")]),t._v(" "),a("li",[t._v("第二步是用"),a("code",[t._v("git commit")]),t._v("提交更改，实际上就是把暂存区的所有内容提交到当前分支")]),t._v(" "),a("li",[t._v("因为我们创建Git版本库时，Git自动为我们创建了唯一一个"),a("code",[t._v("master")]),t._v("分支，所以，现在，"),a("code",[t._v("git commit")]),t._v("就是往"),a("code",[t._v("master")]),t._v("分支上提交更改")]),t._v(" "),a("li",[t._v("你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改")]),t._v(" "),a("li",[t._v("俗话说，实践出真知。现在，我们再练习一遍，先对readme.txt做个修改，比如加上一行内容")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Git is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\n")])])]),a("ul",[a("li",[t._v("然后，在工作区新增一个LICENSE文本文件（内容随便写）")])]),t._v(" "),a("blockquote",[a("p",[t._v("先用"),a("code",[t._v("git status")]),t._v("查看一下状态"),a("br")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\nOn branch master\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   readme.txt\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\n    LICENSE\n\nno changes added to commit (use "git add" and/or "git commit -a")\n')])])]),a("ul",[a("li",[t._v("Git非常清楚地告诉我们，"),a("code",[t._v("readme.txt")]),t._v("被修改了，而"),a("code",[t._v("LICENSE")]),t._v("还从来没有被添加过，所以它的状态是"),a("code",[t._v("Untracked")])])]),t._v(" "),a("blockquote",[a("p",[t._v("现在，使用两次命令"),a("code",[t._v("git add")]),t._v("，把"),a("code",[t._v("readme.txt")]),t._v("和"),a("code",[t._v("LICENSE")]),t._v("都添加后，用"),a("code",[t._v("git status")]),t._v("再查看一下")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    new file:   LICENSE\n    modified:   readme.txt\n')])])]),a("ul",[a("li",[t._v("所以，git add命令实际上就是把要提交的所有修改放到"),a("code",[t._v("暂存区（Stage）")]),t._v("，然后，执行"),a("code",[t._v("git commit")]),t._v("就可以一次性把暂存区的所有修改提交到分支")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git commit -m "understand how stage works"\n[master e43a48b] understand how stage works\n  2 files changed, 2 insertions(+)\n  create mode 100644 LICENSE\n')])])]),a("ul",[a("li",[t._v("一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git status\nOn branch master\nnothing to commit, working tree clean\n")])])]),a("h2",{attrs:{id:"管理修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理修改","aria-hidden":"true"}},[t._v("#")]),t._v(" 管理修改")]),t._v(" "),a("blockquote",[a("p",[t._v("为什么说Git管理的是修改，而不是文件呢？我们还是做实验。第一步，对"),a("code",[t._v("readme.txt")]),t._v("做一个修改，比如加一行内容")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes.\n")])])]),a("blockquote",[a("p",[t._v("然后，添加")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git add readme.txt\n$ git status\n# On branch master\n# Changes to be committed:\n#   (use "git reset HEAD <file>..." to unstage)\n#\n#       modified:   readme.txt\n#\n')])])]),a("blockquote",[a("p",[t._v("然后，再修改readme.txt")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cat readme.txt \nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\n")])])]),a("blockquote",[a("p",[t._v("提交")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git commit -m "git tracks changes"\n[master 519219b] git tracks changes\n  1 file changed, 1 insertion(+)\n')])])]),a("blockquote",[a("p",[t._v("提交后，再看看状态")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\nOn branch master\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   readme.txt\n\nno changes added to commit (use "git add" and/or "git commit -a")\n')])])]),a("ul",[a("li",[t._v("第一次修改 -> "),a("code",[t._v("git add")]),t._v(" -> 第二次修改 -> "),a("code",[t._v("git commit")])])]),t._v(" "),a("blockquote",[a("p",[t._v("你看，我们前面讲了，Git管理的是修改，当你用"),a("code",[t._v("git add")]),t._v("命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，"),a("code",[t._v("git commit")]),t._v("只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交\n提交后，用"),a("code",[t._v("git diff HEAD -- readme.txt")]),t._v("命令可以查看工作区和版本库里面最新版本的区别")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git diff HEAD -- readme.txt \ndiff --git a/readme.txt b/readme.txt\nindex 76d770f..a9c5755 100644\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1,4 +1,4 @@\n  Git is a distributed version control system.\n  Git is free software distributed under the GPL.\n  Git has a mutable index called stage.\n-Git tracks changes.\n+Git tracks changes of files.\n")])])]),a("blockquote",[a("p",[t._v("那怎么提交第二次修改呢？你可以继续"),a("code",[t._v("git add")]),t._v("再"),a("code",[t._v("git commit")]),t._v("，也可以别着急提交第一次修改，先"),a("code",[t._v("git add")]),t._v("第二次修改，再"),a("code",[t._v("git commit")]),t._v("，就相当于把两次修改合并后一块提交了")])]),t._v(" "),a("ul",[a("li",[t._v("第一次修改 -> git add -> 第二次修改 -> git add -> git commit")])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),a("p",[t._v("现在，你又理解了Git是如何跟踪修改的，每次修改，如果不用"),a("code",[t._v("git add")]),t._v("到暂存区，那就不会加入到"),a("code",[t._v("commit")]),t._v("中")])]),t._v(" "),a("h2",{attrs:{id:"撤销修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改","aria-hidden":"true"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),a("blockquote",[a("p",[t._v("你在"),a("code",[t._v("readme.txt")]),t._v("中添加了一行")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\nMy stupid boss still prefers SVN.\n")])])]),a("blockquote",[a("p",[t._v("你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用"),a("code",[t._v("git status")]),t._v("查看一下")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\nOn branch master\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   readme.txt\n\nno changes added to commit (use "git add" and/or "git commit -a")\n')])])]),a("blockquote",[a("p",[t._v("你可以发现，Git会告诉你，"),a("code",[t._v("git checkout -- file")]),t._v("可以丢弃工作区的修改")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git checkout -- readme.txt\n")])])]),a("ul",[a("li",[t._v("命令"),a("code",[t._v("git checkout -- readme.txt")]),t._v("意思就是，把"),a("code",[t._v("readme.txt")]),t._v("文件在工作区的修改全部撤销，这里有两种情况：")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("一种是"),a("code",[t._v("readme.txt")]),t._v("自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态")]),t._v(" "),a("li",[t._v("一种是"),a("code",[t._v("readme.txt")]),t._v("已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态")])])]),t._v(" "),a("ul",[a("li",[t._v("总之，就是让这个文件回到最近一次"),a("code",[t._v("git commit")]),t._v("或"),a("code",[t._v("git add")]),t._v("时的状态")])]),t._v(" "),a("blockquote",[a("p",[t._v("现在，看看readme.txt的文件内容")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\n")])])]),a("ul",[a("li",[a("code",[t._v("git checkout -- file")]),t._v("命令中的"),a("code",[t._v("--")]),t._v("很重要，没有"),a("code",[t._v("--")]),t._v("，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到"),a("code",[t._v("git checkout")]),t._v("命令")])]),t._v(" "),a("blockquote",[a("p",[t._v("现在假定是凌晨3点，你不但写了一些胡话，还"),a("code",[t._v("git add")]),t._v("到暂存区了")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\nMy stupid boss still prefers SVN.\n\n$ git add readme.txt\n")])])]),a("blockquote",[a("p",[t._v("庆幸的是，在"),a("code",[t._v("commit")]),t._v("之前，你发现了这个问题。用"),a("code",[t._v("git status")]),t._v("查看一下，修改只是添加到了暂存区，还没有提交")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    modified:   readme.txt\n')])])]),a("blockquote",[a("p",[t._v("Git同样告诉我们，用命令"),a("code",[t._v("git reset HEAD <file>")]),t._v("可以把暂存区的修改撤销掉（unstage），重新放回工作区")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reset HEAD readme.txt\nUnstaged changes after reset:\nM    readme.txt\n")])])]),a("ul",[a("li",[a("code",[t._v("git reset")]),t._v("命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用"),a("code",[t._v("HEAD")]),t._v("时，表示最新的版本")])]),t._v(" "),a("blockquote",[a("p",[t._v("再用"),a("code",[t._v("git status")]),t._v("查看一下，现在暂存区是干净的，工作区有修改")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\nOn branch master\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   readme.txt\n')])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git checkout -- readme.txt\n\n$ git status\nOn branch master\nnothing to commit, working tree clean\n")])])]),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),a("ul",[a("li",[t._v("场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令"),a("code",[t._v("git checkout -- file")]),t._v("。")]),t._v(" "),a("li",[t._v("场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令"),a("code",[t._v("git reset HEAD <file>")]),t._v("，就回到了场景1，第二步按场景1操作。")]),t._v(" "),a("li",[t._v("场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库")])])]),t._v(" "),a("h2",{attrs:{id:"删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 删除文件")]),t._v(" "),a("blockquote",[a("p",[t._v("在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件"),a("code",[t._v("test.txt")]),t._v("到Git并且提交")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git add test.txt\n\n$ git commit -m "add test.txt"\n[master b84166e] add test.txt\n  1 file changed, 1 insertion(+)\n  create mode 100644 test.txt\n')])])]),a("blockquote",[a("p",[t._v("一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ rm test.txt\n")])])]),a("blockquote",[a("p",[t._v("这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，"),a("code",[t._v("git status")]),t._v("命令会立刻告诉你哪些文件被删除了")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\nOn branch master\nChanges not staged for commit:\n  (use "git add/rm <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    deleted:    test.txt\n\nno changes added to commit (use "git add" and/or "git commit -a")\n')])])]),a("blockquote",[a("p",[t._v("现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令"),a("code",[t._v("git rm")]),t._v("删掉，并且"),a("code",[t._v("git commit")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git rm test.txt\nrm 'test.txt'\n\n$ git commit -m \"remove test.txt\"\n[master d46f35e] remove test.txt\n  1 file changed, 1 deletion(-)\n  delete mode 100644 test.tx\n")])])]),a("blockquote",[a("p",[t._v("另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git checkout -- test.txt\n")])])]),a("blockquote",[a("p",[a("code",[t._v("git checkout")]),t._v("其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”")])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),a("p",[t._v("命令"),a("code",[t._v("git rm")]),t._v("用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容")])])],1)},[],!1,null,null,null);d.options.__file="timetrans.md";e.default=d.exports}}]);